package quegel
import com.esotericsoftware.kryo.Kryo
import org.apache.spark.SparkContext._
import org.apache.spark._
import org.apache.spark.graphx._
import org.apache.spark.graphx.lib.Analytics
import scala.reflect.ClassTag
import scala.Array.canBuildFrom

object bfs {

  val SOURCE_LIST = Array(8775635,10158725,1537152,424983,4460860,5720232,3801740,4233501,4032676,7250492,5874492,4455553,8106795,3673120,3455242,5378179,8393699,7424344,2421849,636554,417007,9502109,9684777,9353803,9700392,5803560,6082393,2723282,3878925,6866308,1909228,564741,10183289,7016731,7418712,1652124,3656666,4655158,895453,3278152,6922561,7101035,1819487,3021203,4980840,8791202,1530039,3872248,3178034,8669380,7614650,9715912,8280594,9808181,66913,7521783,2017882,7958028,6457977,7665356,10228023,621725,881769,5637953,4319744,6698026,2191073,854944,9688141,3768781,6723459,9641161,4302795,9331733,4544126,8141690,8773941,2780406,5753124,3442997,3954193,1215994,10296045,2569608,8153900,9310079,8169541,7650180,5325042,9874315,6947119,1498456,828169,5698778,5837040,9524068,3995702,1311175,9906903,7643022,1456750,4797615,3707672,493804,3198369,7943451,5038416,988041,8152010,3706324,2719893,171517,6682864,8871511,4985884,3096321,5151537,8870159,368946,8270411,7658941,1234321,4052463,6156183,6198119,661578,2688801,5177434,8099871,4490848,928858,645947,5396805,7088740,4679960,3705401,10336933,8720441,5502493,663016,5171913,10479771,6604201,6122818,1985920,4803353,10463444,3481832,4229747,9751972,9039183,9696191,8514173,2063268,4756205,5317883,10279303,10182031,4245827,5649322,1407395,1505334,10026891,1258709,7618837,4167189,2689353,7668232,3952839,4797304,1665661,2305139,6758647,8689841,7266715,9695568,9792062,6706695,3551933,6862901,2736580,9812492,4235340,428542,5769134,1566852,2954485,6921652,5901147,4126058,5391905,4722330,4920903,7505321,3377607,10371850,4036304,5579302,1186773,6230497,714123,7157897,344959,6612283,1245998,2183756,801590,4411743,6582531,7585794,5266135,7354798,7636563,4368279,1633015,7287878,7639026,10638168,8633950,7691173,5141037,7831601,5341272,385120,8845925,713754,8102225,130053,8494778,2029963,10032727,7781023,1649143,6005044,7004780,9771290,297819,8047204,10085510,4339013,10213409,8058055,10036801,7864619,10350904,3536559,6377458,7612348,8675616,7301579,1102586,10611825,10000592,665867,902477,2609953,2558490,10037632,9599414,9388665,2062578,850,2991909,9525810,8522934,1203228,2510844,8687397,9526268,8882275,6486673,5124031,6953792,2943730,6352731,8383655,8238781,5605473,1845331,4403521,6885021,4477563,3458506,9578135,6619459,10558205,2634395,5269380,7162371,10641168,9233317,1175178,9519998,8088271,4930657,7609695,7995262,8550273,8526334,3876685,565052,2210768,3826418,662714,3136029,7261003,6281170,4932673,7884320,4975719,6010904,2356769,519318,3413588,4199217,5337049,8060209,5231007,2934081,6825488,1429116,4812684,10518061,8682541,9472692,1777859,10575383,2443573,4570146,6608298,9349558,5667060,7940475,6529223,345761,4369433,6574771,1103447,9020013,4583627,10118102,7755956,5881735,3577057,5452679,8023014,6133982,4127567,1770000,9510297,9713835,3676571,9962201,6198748,9624662,3317098,4040546,3671485,8151274,8598685,9331335,3713773,2885728,6009630,10343204,8154851,6394279,10110979,10171546,8115978,6477579,2440847,5307084,2875141,7445033,582361,1539264,6884601,1809342,2623677,2142792,3700403,9205893,7050412,9459445,7934086,4461314,6704417,1120095,4308336,7429139,8963838,234636,1456722,9957660,2304649,2704439,6738941,10580263,1567462,4118177,2334961,2327588,2465822,2628700,10643080,4105673,1166124,6616975,1383221,8543744,1393188,3166131,8609519,5102071,2303218,9179271,5776291,4012513,1549086,8982399,6274048,183735,9692931,3043561,6094733,881544,1085037,2468122,10453605,10647508,7650456,6626465,8113553,8001470,3062837,3333291,433179,794887,8733637,9181148,5265284,4524403,6384972,852549,500404,2454754,9733049,7331914,2271577,2085070,5921320,2837422,1690121,3747427,10566803,1969035,6667728,9066448,5954601,4332709,6953524,6077421,749039,7448348,456018,8630041,2244806,4213246,8952138,2338760,6051878,1647147,7325772,10482824,6672835,6884527,2159204,7303931,446710,6246362,5253150,1976011,8358774,114255,8662768,1954913,9935118,5052430,10405468,5159585,3915639,2824380,3773334,1947552,1301771,3687716,4540343,4235488,1417926,4297388,2963565,8318803,5404304,5353772,5872764,8506274,9272406,947830,9506574,4623322,10301108,1278593,8174361,5843504,6412856,7096339,819480,1057194,5505905,576786,6009042,1785586,6882545,4010769,8334277,6082399,6206265,10052735,2922453,553197,3278779,4628015,2488041,6092580,456947,8235703,9558077,8951682,6801858,2610774,107769,9269597,3606596,10486813,8169533,7779910,9189861,1326593,2599142,7743166,6681183,3109930,7820879,6258840,9424138,1260317,2510912,444471,2345488,192677,5729747,9744588,7014464,8672287,9190396,5051318,1186257,1910154,4363279,1405888,5187814,626876,7644912,4976511,10265692,2286456,9342842,8889365,8809706,6889693,9080058,8485898,3517150,7262768,10459984,4788975,9010597,7678657,9370267,1307182,4792688,8796662,4684986,5770520,4978170,280215,6145660,4595799,490146,54253,5873832,1838823,7767391,453721,7687785,4950905,3772978,5878880,10378614,4983017,6484232,4331052,1239034,9887811,3593999,8568800,5183995,5584437,8102055,7034126,5719902,6626611,2372970,1031253,8660852,1645122,6255668,7182822,4360587,4516253,4182042,3998385,5534717,2842864,7193608,5198010,6798908,2600554,9586302,5126037,6825032,5822654,537442,2369772,7578962,1384948,7308960,1324984,5946379,8916076,10434632,2787727,2904178,2843006,8928536,865070,6217815,5429096,1472731,5895408,1447356,251883,1362492,4008481,9317531,5649307,113568,1799211,1902401,4166226,2566264,8887364,407077,1089505,1403531,5628780,4415513,7477636,8647170,6457380,9585221,432028,8617008,4672892,3223567,4953566,7037177,942994,7081877,759987,8299718,3019743,6101799,5518857,2553877,1035406,1071851,6226065,2320201,5908012,6150567,3226277,4348153,2925977,1665441,6492520,7483916,7698744,5220228,4217273,10326430,2204147,3779777,621127,9943767,5702969,5506368,9138679,9699246,6741241,3108689,6614161,7361540,7274683,4801531,4328254,6784266,8316676,1858979,5630457,4247226,5961238,2854622,532774,3249080,9905992,563272,8118027,9186434,7901720,363942,9511261,9090759,2865794,7628401,4272600,9610609,1352847,4767524,3142838,3247727,6101417,7220696,827928,2981319,5728130,3151247,1366721,4994994,9170366,5659819,571414,10672132,2875265,5311708,5917570,7644231,1377384,4993400,567118,9020882,5621010,4037632,6716149,1930241,9145113,32605,2299485,4324876,8274973,6911167,4694891,1547545,4327496,9555677,9827228,10147689,1845091,8912123,187771,6460452,6757252,9501767,1127723,5245139,7403790,9891868,5414361,400943,6524701,8017991,1113065,8850828,3065324,8029409,263144,6857398,1035968,8296683,1513729,10122697,5363419,8949044,6524909,10264457,10109065,5456379,3301289,457207,9126790,9350743,10388822,8912710,1919497,335466,892694,760240,4711100,10578361,9164785,5524224,2642381,733817,8586341,9152682,2184044,5342393,3059218,2211871,5855804,3946166,2525681,312576,1782935,771664,9376502,8355975,9713797,3596217,7886593,2680824,5434159,5549044,2162854,9277270,4447875,1244526,2941411,4626275,10214680,4780023,5466313,8166846,3855514,9921749,3979878,5538373,8383508,4407923,7967564,3154954,6603973,3618472,70046,3302085,5207751,4480157,5959217,4645489,2881142,9944731,10513176,9246777,2350369,43490,7685231,3867903,380733,3384809,3330256,4429356,1642345,9458612,7520867,2434033,3194512,7205961,8736503,1283565,5301304,4030205,10140065,1099885,8860516,9008476,10685697,4070552,7392062,8015689,9625897,5794490,7296192,8188978,5635554,3770614,3228942,5985182,8336935,7090576,1922561,396978,5783363,8163596,8487169,3496901,8143045,540784,429253,6257229,2605763,5837676,662276,10320295,8227665,4007203,1745924,7600307,5583751,2869846,6586310,5368308,9317325,5799019,831163,2977072,6999283,9919557,9969937,7629513,5901491,650780,3458676,1743201,3547696,9476289,7405050,4362574,1282758,2895952,177504,6539843,10332844,2633501,10540393,2735148,7308059,3610582,4403143,6691349,7486217,4024361,2470043,991042,7880864,2560362,10548439,6774343,99244,10590558,6384370,2402661,8360858,4660190,4630516,7905839,122494,3902180,6033366,1013971,3474881,2960873,4542137,10610429,7736094,4425647,9412382,3288608,2277297,5562072)
  val DEST_LIST = Array(9939209,10267817,2260717,5761030,9666307,825407,1781522,8050637,7348680,8418716,780404,1482652,6387121,849392,1157095,4658096,7310520,2274666,10161173,966137,803904,46873,8244185,8829069,10233368,10166990,5358782,8982370,548864,5875019,7230741,3243763,14794,9615457,5511217,6934732,1122517,3497266,8104926,6141269,4500308,4551169,187267,9129250,5352749,5807150,10573875,2789313,2095377,6846668,5538651,1166719,9638169,2388285,1569687,530605,4557623,7871519,7009418,8450898,5221630,237857,7126647,4857444,2985222,7283399,2864430,5394108,6345206,1446896,4586323,5148143,2836551,4948381,78943,3214780,9161666,7036957,2693825,8349771,9804686,16265,9847976,9328481,8320116,3552527,4097335,2629587,1254210,5995770,3057304,6507266,3702704,3372235,6615135,6812650,7572832,1501460,494891,1798596,4397225,4388472,4503216,1232522,8471198,10438238,2584476,5966119,1314994,6320761,8697681,1619729,1601295,2969685,7801848,9137223,7703979,6640100,3818637,4630001,6615847,6384482,9250903,1846674,6946495,275295,5358877,4826811,3000643,9701679,586674,5441416,10148469,1676733,1585005,4040182,6793431,195664,5919488,278829,2822949,8922519,6581805,9813465,2989874,6092724,5234742,3355971,8828706,4371940,4708812,6236301,1284459,303389,5437590,8671020,4597378,8383526,1612338,8806440,32088,2532835,10378957,9984353,3136913,3828052,5994286,6007470,3766262,7176333,3546524,3569012,1721859,6690282,1562587,2473217,6177536,392281,4017630,621486,9216113,3851566,7666840,2894616,9628395,4639203,852887,6483773,7361713,6199186,2806968,5762856,6213001,10395777,231072,8704240,3244707,1452932,1722166,7097991,10239976,6820713,5060618,3609703,8587255,1663701,1805734,654654,7320679,5471671,8256972,815726,8953718,10616276,5283970,6599588,3022172,3336282,4520428,8397492,6773481,5998537,4951969,1674030,7251551,7536260,4051799,3638364,265454,5393740,1474991,10425313,3998137,10095510,1228612,2963737,3703694,4899663,3231556,2198782,4811103,2365483,5449538,5897703,5016286,8742913,10002509,4851833,6977351,2896477,4467209,4448584,3522449,2939025,6606209,4791914,6453579,7880055,6796055,633169,4348265,8644719,149782,6186116,2706054,5507554,4483904,5950920,6879292,3496079,3419262,1269245,6865238,2855992,4006710,4257670,7881398,6602848,4897060,7838034,7033743,7220610,5622632,4938038,4416395,4874224,2331379,7917039,5700963,219164,5809581,5392391,234152,5751715,1855357,6361906,4266066,7875617,9182374,6729551,8061246,9766191,2898712,7701794,10118282,1234443,585328,1439219,4554624,7573563,8396983,98633,690980,4985283,4722388,9784867,10336133,131725,10452640,3399207,4245473,10130055,2097692,557990,9040789,6417482,2670330,5374759,10263108,4743432,9187015,6329208,1679143,7563515,8288887,2329970,6843371,4331239,5784808,3903089,9626970,10575301,8929959,9414438,3147878,9853542,4379214,533910,1081741,3679873,8183493,5018309,10285858,127029,8725540,5699454,4971040,552040,4407446,8461132,3377837,1767351,10650303,2097353,4311550,9739550,8604464,5078002,84366,7961286,1183854,1086814,4216259,6864305,5292157,4311413,6471890,5764907,10336901,5643436,9968870,9400907,421768,6997621,6482749,10591181,9857009,7677803,4110982,9511867,311865,2083262,4813701,5543155,1632354,5642585,2959296,2165950,6779947,6511523,7227275,6201742,124465,8999519,6998333,9720527,7879623,3206304,4298771,2712573,5828805,7392995,6404924,2433413,9256543,1849397,1667834,8888443,6085559,5654137,4427202,6605541,9615048,1211558,6965330,3372036,3366074,9991407,9946059,6897231,9461717,6929565,5705313,7508474,2337447,5359648,4479654,1029597,7700400,8947953,9360505,9139739,9174250,7236880,9065270,4292954,5528284,7412853,4055060,3073705,4201497,1566637,1057334,3928150,7149975,9426606,512496,9738284,4384510,6603925,3935349,9562533,8564943,2757781,8091111,2753489,7623300,8885834,5139916,4365841,3898909,5260739,6697680,8430893,1995293,7045026,4067213,1765742,8224826,10227439,5593214,2176930,6428363,470257,7816798,6603792,178506,2988830,1544843,9795047,9890861,6182917,9087956,3429529,5287439,9159887,8571106,7944324,1610416,6529166,8053763,1225376,8479125,7542262,1480931,4942795,6527250,7919173,1886415,6611494,7051326,2902620,10429767,5262735,2141822,3999418,10016453,3224132,3185620,4899356,5342571,4753735,5024156,3936654,1313819,6052974,2695462,4434359,8798954,7383102,2134776,3074265,3329785,1158453,3096045,251593,7383241,156285,460567,4511277,7477689,7245885,2252643,2263308,5335201,8679090,7804075,736567,4056752,24173,7706834,2189849,4912753,10377537,7242257,3335703,3785744,2788030,7503904,3289475,5028248,4559986,5369717,2070546,9508785,5241667,8394360,5495474,64417,4606719,4445739,8297163,2431516,9445028,8784870,2035992,3572745,7307218,1071799,5964351,1773932,5265825,762079,6617072,4586692,2900417,3507236,3210504,186452,2393685,4907775,1893634,2910197,456588,8081647,10133172,3651222,6150826,3321919,10687359,9831803,10630654,9856546,7223711,5624535,10472274,5758997,58316,5526155,1355171,3228605,4379184,8952513,2442720,3152920,6551752,7800827,2816366,5892793,502972,752514,6479065,3712687,1815003,4067282,10293191,1988921,9689828,2249676,7684303,3408623,2978316,6698618,3757476,3335656,8907236,1033084,10250160,733157,3620135,3181182,1933115,885142,3652420,8571841,8228211,8136427,5734775,6968648,2516371,9594079,193757,8313786,3019046,10398940,1442861,3642531,6214382,1060610,6403356,7764439,5472699,4499259,7812918,1215920,5873424,3738956,1938662,6735479,3253359,9528963,4900484,1075740,4868059,9852594,2179819,8767494,5353765,4252356,6344793,6711512,10437992,8193946,8172947,2844862,4703559,3028127,4112505,219983,3227791,9841825,7372765,6174118,9119476,1984945,1232787,686240,1026053,2691961,2323874,8639923,3226601,3099452,6773004,8425112,2652193,2815781,255386,4302290,4974924,4577935,2655714,4185971,253614,10470698,4913806,4572502,5583625,10180249,8537964,8960745,2654024,9053937,10177303,3149458,448707,9862985,7090761,3885386,5779687,3825007,9483617,743104,7355109,4438305,6033744,1699366,2897601,9587286,2681038,9552249,5061121,2042466,5479384,3030432,8163859,7749621,9508899,6219588,5165479,1948548,1185696,9968914,4660425,10567577,5136426,4419790,6200325,9076510,6569073,8289708,2849373,1611698,9347673,10049270,1935295,6759580,6307620,8855049,3411802,4209250,1964835,7790608,9084340,9759987,1962962,8854883,6528903,1842509,9479254,9681468,8261154,8042586,8162650,3246815,8594557,5403614,8571763,673881,6010229,374054,2332936,5242894,8884765,660806,5373259,6134154,9195765,5568463,4394928,6130551,3503210,4643959,1801458,2220518,7037216,9131286,541806,10348124,6013493,4761341,942129,6948223,7751174,10184952,7701682,801656,6438290,9669777,7954301,9176096,1938045,2620021,8982856,8580998,4209535,996640,4890020,4776672,561752,2610214,5136186,601938,9966753,4956531,2400686,8192508,8123586,741053,9789043,9383566,8341476,4349056,10689633,10595422,4064764,2764619,9992867,167457,7093714,6510588,7557763,588011,1987420,1314691,3507642,6777119,5406588,6975896,7368229,9489565,948823,1421005,10618796,8206988,3444856,5109728,1626331,4879579,3200337,4470271,7427809,6283598,9956627,4174528,4525892,3887560,10233434,2695131,5983032,3695976,7382255,7034899,4755482,3534765,6233934,10189220,10022346,8838152,6643459,7289591,4865995,4599660,2976141,6001542,8819108,3993779,2231518,6010077,4578124,5588125,9105671,7271781,185798,6193851,6929723,7978216,1516787,6424776,7967054,9036819,8362208,3809839,3034850,6547491,6652107,3473580,1210805,6808295,3923447,10097252,5424838,3171846,9174761,2156735,4561879,9653203,4075228,9824034,5032168,2141134,8228296,5850461,7946468,7533982,5780693,10169217,10664863,6634497,9019565,2519606,8844949,3381437,5135622,619608,570964,4088618,3455435,7922077,10272319,8155396,6360853,7409026,8249596,7057121,7946605,967909,3917493,9227739,9432586,3478421,9129465,4015814,983363,1326526,2650051,8342872,5731020,9265555,9245269,3912515,10146135,3593503,10555853,5404066,5413388,9888708,2430336,4684702,8381595,4027136,7428709,2956061,3278385,638341,9328495,1495537,10662259,8031185,7416442,5984212,699628,10183915,3075047,7442764,6088093,10451394,3588543,6614431,3848515)

  val SEPARATOR = "[\t ]"

  def loadUndirectedGraph[VD: ClassTag, ED: ClassTag](sc: SparkContext, path: String, defaultEdgeAttr: ED, defaultVetexAttr: VD): Graph[VD, ED] =
    {
      val textRDD = sc.textFile(path);
      val edge = textRDD.flatMap(
        line => {
          val numbers = line.split(SEPARATOR);
          val srcId: VertexId = numbers(0).trim.toLong;
          numbers.slice(2, numbers.size).map(num => Edge(srcId, num.trim.toLong, defaultEdgeAttr)).filter(p => p.srcId != p.dstId)
        })
      Graph.fromEdges[VD, ED](edge, defaultVetexAttr);
    }

  def loadDirectedGraph[VD: ClassTag, ED: ClassTag](sc: SparkContext, path: String, defaultEdgeAttr: ED, defaultVetexAttr: VD): Graph[VD, ED] =
    {
      val textRDD = sc.textFile(path);
      val edge = textRDD.flatMap(
        line => {
          val numbers = line.split(SEPARATOR);
          val srcId: VertexId = numbers(0).trim.toLong;
          val inNeighborsNum = numbers(1).trim.toInt;
          numbers.slice(3 + inNeighborsNum, numbers.size).map(num => Edge(srcId, num.trim.toLong, defaultEdgeAttr)).filter(p => p.srcId != p.dstId)
        })
      Graph.fromEdges[VD, ED](edge, defaultVetexAttr);
    }

  def SingleSourceBFS(sc: SparkContext, inputPath: String, outputPath: String): (Double, Double, Double) = {
    var startTime = System.currentTimeMillis
    val graph = loadUndirectedGraph(sc, inputPath, 1, 1).partitionBy(PartitionStrategy.EdgePartition1D)
    val loadtime = System.currentTimeMillis - startTime

    var computetime = 0.0
    var dumpTime = 0.0

    for (i <- 0 until SOURCE_LIST.length) {
      val SOURCE_VERTEX = SOURCE_LIST(i)
      val DEST_VERTEX = DEST_LIST(i)

      System.out.println("Query #" + i + " : Source[ " + SOURCE_VERTEX +" ] Dest[ " + DEST_VERTEX +" ]." )
      
      startTime = System.currentTimeMillis

      var bfsGraph = graph.mapVertices((id, _) => if (id == SOURCE_VERTEX) 0 else Int.MaxValue)

      var newVisited: Long = 1
      var found = false
      var superstep = 0

      //bfsGraph.vertices.collect().foreach(f => println("######## " + f._1 + " " + f._2))

      while (newVisited > 0 && !found) {

        superstep += 1

        bfsGraph = bfsGraph.pregel(Int.MaxValue, 1)(
          (id, dist, newDist) => math.min(dist, newDist), // Vertex Program
          triplet => { // Send Message
            if (triplet.srcAttr != Int.MaxValue && triplet.dstAttr == Int.MaxValue) {
              Iterator((triplet.dstId, superstep))
            } else {
              Iterator.empty
            }
          },
          (a, b) => a // Merge Message
          )

        newVisited = bfsGraph.vertices.filter(f => f._2 == superstep).count
        found = bfsGraph.vertices.filter { case (id, dis) => id == DEST_VERTEX && dis != Int.MaxValue }.count != 0
        //bfsGraph.vertices.collect().foreach(f => println("######## " + f._1 + " " + f._2))
      }

      computetime += System.currentTimeMillis - startTime

      System.out.println("Query #" + i + " Time: " + (System.currentTimeMillis - startTime )) 
      
      startTime = System.currentTimeMillis
      val curOutputPath = outputPath + "_" + i

      val result = bfsGraph.vertices.filter { case (id, dis) => id == DEST_VERTEX }
      result.saveAsTextFile(curOutputPath)
      dumpTime += System.currentTimeMillis - startTime

    }
    (loadtime, computetime, dumpTime)
  }

  def BiBFS(sc: SparkContext, inputPath: String, outputPath: String): (Double, Double, Double) = {
    var startTime = System.currentTimeMillis
    val graph = loadDirectedGraph(sc, inputPath, (1, 1), 1).partitionBy(PartitionStrategy.RandomVertexCut)
    val loadtime = System.currentTimeMillis - startTime

    //System.out.println("### edges: " + graph.edges.count + " vertices: " + graph.vertices.count)

    var computetime = 0.0
    var dumpTime = 0.0

    for (i <- 0 until SOURCE_LIST.length) {
      val SOURCE_VERTEX = SOURCE_LIST(i)
      val DEST_VERTEX = DEST_LIST(i)

      startTime = System.currentTimeMillis

      var bfsGraph = graph.mapVertices((id, _) =>
        id match {
          case SOURCE_VERTEX => (0, Int.MaxValue)
          case DEST_VERTEX => (Int.MaxValue, 0)
          case _ => (Int.MaxValue, Int.MaxValue)
        })

      var forwardVisited: Long = 1
      var backwardVisited: Long = 1

      var found = false
      var superstep = 0

      //bfsGraph.vertices.collect().foreach(f => println("######## " + f._1 + " " + f._2._1 + " " + f._2._2))

      while (forwardVisited > 0 && forwardVisited > 0 && !found) {

        superstep += 1
        //forward
        bfsGraph = bfsGraph.pregel(Int.MaxValue, 1)(
          (id, dist, newDist) => (math.min(dist._1, newDist), dist._2), // Vertex Program
          triplet => { // Send Message
            if (triplet.srcAttr._1 != Int.MaxValue && triplet.dstAttr._1 == Int.MaxValue) {
              Iterator((triplet.dstId, superstep))
            } else {
              Iterator.empty
            }
          },
          (a, b) => a // Merge Message
          )

        //bfsGraph.vertices.collect().foreach(f => println("######## " + f._1 + " " + f._2._1 + " " + f._2._2))

        //backward
        bfsGraph = bfsGraph.pregel(Int.MaxValue, 1)(
          (id, dist, newDist) => (dist._1, math.min(dist._2, newDist)), // Vertex Program
          triplet => { // Send Message
            if (triplet.dstAttr._2 != Int.MaxValue && triplet.srcAttr._2 == Int.MaxValue) {
              Iterator((triplet.srcId, superstep))
            } else {
              Iterator.empty
            }
          },
          (a, b) => a // Merge Message
          )

        forwardVisited = bfsGraph.vertices.filter(f => f._2._1 == superstep).count
        backwardVisited = bfsGraph.vertices.filter(f => f._2._2 == superstep).count

        found = bfsGraph.vertices.filter { case (_, dis) => dis._1 != Int.MaxValue && dis._2 != Int.MaxValue }.count != 0
        //bfsGraph.vertices.collect().foreach(f => println("######## " + f._1 + " " + f._2._1 + " " + f._2._2))
      }

      computetime += System.currentTimeMillis - startTime

      startTime = System.currentTimeMillis
      val curOutputPath = outputPath + "_" + i

      var result = -1

      if (found) {
        result = bfsGraph.vertices.flatMap(attr => {
          val fdist = attr._2._1
          val bdist = attr._2._2

          if (fdist == Int.MaxValue || bdist == Int.MaxValue)
            Iterator.empty
          else
            Iterator(fdist + bdist)
        }).reduce((a, b) => math.min(a, b))

      }

      //System.out.println("#### " + DEST_VERTEX + " " + result)
      sc.parallelize(Seq((DEST_VERTEX, result)), 1).saveAsTextFile(curOutputPath)

      dumpTime += System.currentTimeMillis - startTime

    }
    (loadtime, computetime, dumpTime)
  }

  def main(args: Array[String]) {
    val conf = new SparkConf().setMaster(args (0)).setAppName("bfs")
    conf.set("spark.serializer", "org.apache.spark.serializer.KryoSerializer")
    conf.set("spark.local.dir", "/home/yanda/sparktemp")
    val sc = new SparkContext(conf)
    
    val inputPath = args(1)
    val outputPath = args(2)
    val cmd = args(3)

    val times =
      cmd match {
        case "bfs" => {
          SingleSourceBFS(sc, inputPath, outputPath)
        }
        case "biBfs" => {
          BiBFS(sc, inputPath, outputPath)
        }
        case _ => {
          System.out.println("Wrong parameters!")
          (0.0, 0.0, 0.0)
        }
      }

    System.out.println("Loading Graph in " + times._1 + " ms.")
    System.out.println("Finished Running engine in " + times._2 + " ms.")
    System.out.println("Dumping Graph in " + times._3 + " ms.")
  }
}
